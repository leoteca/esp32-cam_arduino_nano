#include "esp_camera.h"
#include <WiFi.h>
#include <WebServer.h>
#include <ArduinoJson.h>

// Pines de la cámara para AI-Thinker ESP32-CAM
#define PWDN_GPIO_NUM     -1
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM     0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27
#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM       5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22

// WiFi
const char* ssid = "GOT";
const char* password = "28175656*";

// Comunicación con Arduino (TX/RX)
HardwareSerial ArduinoSerial(2);
String temperature = "0.0";
String humidity = "0.0";

// Web server
WebServer server(80);

// Función para inicializar la cámara
void startCamera() {
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer   = LEDC_TIMER_0;
  config.pin_d0       = Y2_GPIO_NUM;
  config.pin_d1       = Y3_GPIO_NUM;
  config.pin_d2       = Y4_GPIO_NUM;
  config.pin_d3       = Y5_GPIO_NUM;
  config.pin_d4       = Y6_GPIO_NUM;
  config.pin_d5       = Y7_GPIO_NUM;
  config.pin_d6       = Y8_GPIO_NUM;
  config.pin_d7       = Y9_GPIO_NUM;
  config.pin_xclk     = XCLK_GPIO_NUM;
  config.pin_pclk     = PCLK_GPIO_NUM;
  config.pin_vsync    = VSYNC_GPIO_NUM;
  config.pin_href     = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn     = PWDN_GPIO_NUM;
  config.pin_reset    = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;

  if(psramFound()) {
    config.frame_size = FRAMESIZE_VGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  }

  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Error inicializando cámara: 0x%x", err);
    return;
  }
}

// Función para enviar el stream MJPEG
void handleStream() {
  WiFiClient client = server.client();
  String response = "HTTP/1.1 200 OK\r\n";
  response += "Content-Type: multipart/x-mixed-replace; boundary=frame\r\n\r\n";
  server.sendContent(response);

  while (1) {
    camera_fb_t* fb = esp_camera_fb_get();
    if (!fb) {
      Serial.println("Error capturando frame");
      continue;
    }

    server.sendContent("--frame\r\n");
    server.sendContent("Content-Type: image/jpeg\r\n\r\n");
    server.client().write(fb->buf, fb->len);
    server.sendContent("\r\n");
    esp_camera_fb_return(fb);

    if (!client.connected()) break;
    delay(50);  // ~20 fps
  }
}

// Función para enviar datos de temperatura/humedad
void handleSensorData() {
  StaticJsonDocument<128> doc;
  doc["temperature"] = temperature;
  doc["humidity"] = humidity;

  String json;
  serializeJson(doc, json);
  server.send(200, "application/json", json);
}

void setup() {
  Serial.begin(115200);
  delay(1000);  // Dar tiempo a que se abra el puerto serial
  Serial.println("ESP32-CAM iniciado correctamente");
  ArduinoSerial.begin(9600, SERIAL_8N1, 16, 17); // RX=16, TX=17
  int n = WiFi.scanNetworks();
  Serial.println("Redes encontradas:");
  for (int i = 0; i < n; ++i) {
    Serial.println(WiFi.SSID(i));
}

  WiFi.begin(ssid, password);
  Serial.print("Conectando a WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConectado");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());

  startCamera();

  server.on("/", HTTP_GET, handleStream);
  server.on("/temp_humidity", HTTP_GET, handleSensorData);

  server.begin();
  Serial.println("Servidor listo");
}

void loop() {
  server.handleClient();

  // Leer datos del Arduino: formato "T:23.4 H:58.2"
  if (ArduinoSerial.available()) {
    String line = ArduinoSerial.readStringUntil('\n');
    line.trim();

if (line.startsWith("T:") && line.indexOf("H:") != -1) {
    int hIndex = line.indexOf("H:");
    temperature = line.substring(2, hIndex);
    temperature.trim();
    humidity = line.substring(hIndex + 2);
    humidity.trim();

    Serial.println(">> Datos recibidos:");
    Serial.println("Temp: " + temperature);
    Serial.println("Hum: " + humidity);
    }
  }
}
